// <auto-generated />
using System;
using Backend_TeaTech.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend_TeaTech.Migrations
{
    [DbContext(typeof(ConnectionContext))]
    [Migration("20240503204301_criacao-table-assessment")]
    partial class criacaotableassessment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend_TeaTech.Models.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChildAssessment")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assessment");

                    b.Property<int>("StatusCode")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("status_code");

                    b.Property<Guid?>("fk_child_assisted_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("fk_employee_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("fk_child_assisted_id");

                    b.HasIndex("fk_employee_id");

                    b.ToTable("assessments");
                });

            modelBuilder.Entity("Backend_TeaTech.Models.ChildAssisted", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Aversions")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("aversions");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("FoodSelectivity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("food_selectivity");

                    b.Property<string>("MedicalRecord")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("medical_record");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("photo");

                    b.Property<string>("Preferences")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("preferences");

                    b.Property<Guid?>("fk_responsible_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("fk_responsible_id");

                    b.ToTable("child_assisteds");
                });

            modelBuilder.Entity("Backend_TeaTech.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Cpf")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cpf");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("OccupationType")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("occupation_type");

                    b.Property<Guid?>("fk_user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("fk_user_id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("Backend_TeaTech.Models.PreAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FinalDuration")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("final_duration");

                    b.Property<string>("IdentifiedSkills")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("identified_skill");

                    b.Property<string>("ProposedActivity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("proposed_activity");

                    b.Property<string>("Protocol")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("protocol");

                    b.Property<int>("StatusCode")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("status_code");

                    b.Property<Guid?>("fk_child_assisted_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("fk_employee_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("fk_child_assisted_id");

                    b.HasIndex("fk_employee_id");

                    b.ToTable("pre_analysiss");
                });

            modelBuilder.Entity("Backend_TeaTech.Models.Responsible", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactOne")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contact_one");

                    b.Property<string>("ContactTwo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contact_two");

                    b.Property<string>("NameResponsibleOne")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_responsible_one");

                    b.Property<string>("NameResponsibleTwo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_responsible_two");

                    b.Property<string>("ResponsibleCpfOne")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("responsible_cpf_one");

                    b.Property<string>("ResponsibleCpfTwo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("resposible_cpf_two");

                    b.Property<string>("ResponsibleKinshipOne")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("responsible_kinship_one");

                    b.Property<string>("ResponsibleKinshipTwo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("responsible_kinship_two");

                    b.Property<Guid?>("fk_user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("fk_user_id");

                    b.ToTable("responsibles");
                });

            modelBuilder.Entity("Backend_TeaTech.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<int>("UserType")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Backend_TeaTech.Models.Assessment", b =>
                {
                    b.HasOne("Backend_TeaTech.Models.ChildAssisted", "ChildAssisted")
                        .WithMany()
                        .HasForeignKey("fk_child_assisted_id");

                    b.HasOne("Backend_TeaTech.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("fk_employee_id");

                    b.Navigation("ChildAssisted");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Backend_TeaTech.Models.ChildAssisted", b =>
                {
                    b.HasOne("Backend_TeaTech.Models.Responsible", "Responsible")
                        .WithMany()
                        .HasForeignKey("fk_responsible_id");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("Backend_TeaTech.Models.Employee", b =>
                {
                    b.HasOne("Backend_TeaTech.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("fk_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_TeaTech.Models.PreAnalysis", b =>
                {
                    b.HasOne("Backend_TeaTech.Models.ChildAssisted", "ChildAssisted")
                        .WithMany()
                        .HasForeignKey("fk_child_assisted_id");

                    b.HasOne("Backend_TeaTech.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("fk_employee_id");

                    b.Navigation("ChildAssisted");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Backend_TeaTech.Models.Responsible", b =>
                {
                    b.HasOne("Backend_TeaTech.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("fk_user_id");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
